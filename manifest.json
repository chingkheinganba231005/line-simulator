<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Line Simulator - y = mx + c</title>
  <link rel="manifest" href="manifest.json">
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      margin: 40px;
      background: #ffffff;
    }

    h1 {
      color: #222;
    }

    canvas {
      border: 1px solid #ccc;
      background: #f8f8f8;
      margin-top: 20px;
    }

    .slider-container {
      margin: 20px;
    }

    label {
      font-weight: bold;
    }
  </style>
</head>

<body>
  <h1>Chingkheinganba's Line Simulator: y = mx + c</h1>

  <div class="slider-container">
    <label>Slope (m): </label>
    <input type="range" id="slope" min="-5" max="5" value="1" step="0.1">
    <span id="slopeVal">1</span>
  </div>

  <div class="slider-container">
    <label>Y-Intercept (c): </label>
    <input type="range" id="intercept" min="-10" max="10" value="0" step="0.1">
    <span id="interceptVal">0</span>
  </div>

  <canvas id="graph" width="600" height="400"></canvas>

  <script>
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('service-worker.js')
        .then(reg => console.log('Service worker registered ✔️'))
        .catch(err => console.warn('Service worker failed:', err));
    }

    const canvas = document.getElementById('graph');
    const ctx = canvas.getContext('2d');
    const slopeInput = document.getElementById('slope');
    const interceptInput = document.getElementById('intercept');
    const slopeVal = document.getElementById('slopeVal');
    const interceptVal = document.getElementById('interceptVal');

    function drawGrid() {
      ctx.strokeStyle = "#ddd";
      ctx.lineWidth = 1;

      for (let x = 0; x <= canvas.width; x += 20) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, canvas.height);
        ctx.stroke();
      }

      for (let y = 0; y <= canvas.height; y += 20) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
      }

      ctx.strokeStyle = "#000";
      ctx.lineWidth = 2;

      ctx.beginPath();
      ctx.moveTo(0, canvas.height / 2);
      ctx.lineTo(canvas.width, canvas.height / 2);
      ctx.stroke();

      ctx.beginPath();
      ctx.moveTo(canvas.width / 2, 0);
      ctx.lineTo(canvas.width / 2, canvas.height);
      ctx.stroke();
    }

    function drawLine(m, c) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawGrid();

      ctx.beginPath();
      ctx.strokeStyle = "blue";
      ctx.lineWidth = 2;

      const x1 = -canvas.width / 2;
      const x2 = canvas.width / 2;

      const y1 = m * (x1 / 20) + c;
      const y2 = m * (x2 / 20) + c;

      ctx.moveTo(canvas.width / 2 + x1, canvas.height / 2 - y1 * 20);
      ctx.lineTo(canvas.width / 2 + x2, canvas.height / 2 - y2 * 20);
      ctx.stroke();
    }

    function updateGraph() {
      const m = parseFloat(slopeInput.value);
      const c = parseFloat(interceptInput.value);
      slopeVal.textContent = m;
      interceptVal.textContent = c;
      drawLine(m, c);
    }

    slopeInput.addEventListener("input", updateGraph);
    interceptInput.addEventListener("input", updateGraph);
    updateGraph();
  </script>
</body>
</html>
